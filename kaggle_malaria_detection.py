# -*- coding: utf-8 -*-
"""kaggle_malaria_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Tszcbqk_u2cuT1_8E6atVu8ClI5yZBO6
"""

from google.colab import drive
drive.mount('/content/gdrive')

## MAlaria Detection using Transfer Learning

# Download The Dataset from 
#https://www.kaggle.com/iarunava/cell-images-for-detecting-malaria

#Let's unzip the out dataset
import os

#give your directory path here in which you want to save your unzip file
os.chdir('/content/gdrive/My Drive/data science/kaggle_project/malaria_detection/cell_data')

#give your path of zip file below here
!unzip '/content/gdrive/My Drive/data science/kaggle_project/malaria_detection/cell_data_ordered.zip'



from keras.layers import Input, Lambda, Dense, Flatten
from keras.models import Model

# Commented out IPython magic to ensure Python compatibility.
#from keras.applications.vgg16 import VGG16
from keras.applications.vgg19 import VGG19
from keras.applications.vgg19 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
import numpy as np
from glob import glob #Python, the glob module is used to retrieve files/pathnames matching a specified pattern
import matplotlib.pyplot as plt
# %matplotlib inline

# re-size all the images to this
IMAGE_SIZE = [224, 224]

train_path = '/content/gdrive/My Drive/data science/kaggle_project/malaria_detection/cell_data/cell_data_ordered/Train'
valid_path = '/content/gdrive/My Drive/data science/kaggle_project/malaria_detection/cell_data/cell_data_ordered/Test'

# add preprocessing layer to the front of VGG
vgg = VGG19(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False) 
#include_top: whether to include the 3 fully-connected layers at the top of the network

# don't train existing weights
for layer in vgg.layers:
  layer.trainable = False

# now we want to find out the the number of classes so we will use the 'glob' function for that
folders = glob('/content/gdrive/My Drive/data science/kaggle_project/malaria_detection/cell_data/cell_data_ordered/Train/*')

#lets let's flatten the final convolutional layes or vgg-19 output
x = Flatten()(vgg.output)
#lets add the final output neural networks there will be 2 perceptron on the end because we have 2 catagories
prediction = Dense(len(folders), activation='softmax')(x)

print(len(folders))

# create a model object
model = Model(inputs=vgg.input, outputs=prediction)

# view the structure of the model
print(model.summary())

# tell the model what cost and optimization method to use
model.compile(
  loss='categorical_crossentropy',
  optimizer='adam',
  metrics=['accuracy']
)

# Use the Image Data Generator to import the images from the dataset
from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

#we don't need to do data_augmentation for test data

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory(train_path,
                                                 target_size = (224, 224),
                                                 batch_size = 32,
                                                 class_mode = 'categorical')

test_set = test_datagen.flow_from_directory(valid_path,
                                            target_size = (224, 224),
                                            batch_size = 32,
                                            class_mode = 'categorical')

# fit the model
r = model.fit_generator(
  training_set,
  validation_data=test_set,
  epochs=5,
  steps_per_epoch=len(training_set),
  validation_steps=len(test_set)
)

# loss
plt.plot(r.history['loss'], label='train loss')
plt.plot(r.history['val_loss'], label='val loss')
plt.legend()
plt.show()
plt.savefig('LossVal_loss')

# accuracies
plt.plot(r.history['accuracy'], label='train acc')
plt.plot(r.history['val_accuracy'], label='val acc')
plt.legend()
plt.show()
plt.savefig('AccVal_acc')

import tensorflow as tf

from keras.models import load_model

model.save('model_vgg19.h5')







